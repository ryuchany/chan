<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="exam">

	<insert id="insert" parameterType="ExamDto">
		insert into exam values(
			exam_seq.nextval,
			#{student},
			#{subject},
			#{type},
			#{score}
		)
	</insert>

	<!-- 목록 -->
	<select id="list" resultType="ExamDto">
		select * from exam
	</select>

	<!-- 상세 -->
	<select id="get" parameterType="int" resultType="ExamDto">
		select * from exam where exam_id = #{examId}
	</select>
	
	<!-- 검색 -->
	<select id="search" parameterType="String" resultType="ExamDto">
		select * from exam where instr(student, #{student}) > 0
	</select>

	<!-- 
		컬럼+키워드 검색 
		- 마이바티스는 데이터를 1개만 전달받아서 구문을 실행하도록 구성되어 있다.
		- 여러 개의 데이터를 전달해야 하는 상황이라면 객체 또는 Map을 사용한다.
		- 데이터를 있는 그대로 구문에 적용해야 한다면 정적 바인딩을 사용
	-->
	<select id="searchByColumnAndKeyword" parameterType="map" resultType="ExamDto">
		select * from exam where instr(${column}, #{keyword}) > 0
	</select>

	<select id="totalSearch" parameterType="map" resultType="ExamDto">
		select * from exam
		<if test="column != null and keyword != null">
			where instr(${column}, #{keyword}) > 0
		</if>
	</select>	

</mapper>