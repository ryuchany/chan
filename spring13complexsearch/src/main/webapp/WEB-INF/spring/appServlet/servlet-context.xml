<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	Spring에서 사용자 요청을 모두 처리하는 DispatcherServlet이 알아야 하는 설정
	(DispatcherServlet에게 부탁하는 내용들이 적혀있는 문서)
	
	= 사용자가 OOO 과 같은 요청을 보낸다면 OOO 으로 처리해주세요!
	= 요청과 관련된 설정이 이곳에 작성됨
 -->
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 
		View Resolver 설정
		= 컨트롤러에서 업무 수행 후 JSP와 연결할 때 작성하는 주소를 간소화 하는 역할의 도구
		= org.springframework.web.servlet.view.InternalResourceViewResolver
		= prefix라는 속성으로 접두사를 설정
		= suffix라는 속성으로 접미사를 설정
		= 접두사 접미사를 제외하고 주소를 설정하면 자동 완성
	 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 
		Component Scan 설정
		= 자동으로 구성요소들을 탐색하는 설정
		= 특정 지점(base-package)을 설정하여 해당 지점에 있는 모든 요소를 탐색하여 등록한다
		= spring-context 모듈의 설정
		= 제외하고 싶은 내용은 exclude-filter, 추가하고 싶은 내용은 include-filter 를 사용
		= 자동일 경우는 제외나 추가가 안된다.
		= 어노테이션 설정이 된 파일들을 탐색하여 자동으로 이 파일에 등록 처리
		= @Controller , @RestController , @Service , @Component , @Repository , ....
		= annotation-driven 설정을 해야 annotation이 활성화된다
	 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	<context:component-scan base-package="com.kh.spring13"></context:component-scan>

	<!-- 
		데이터베이스 관련 도구 등록
		- DriverManagerDataSource : 일반 연결 생성 도구(매번 신규 생성)
		- BasicDataSource : DBCP 연결 생성 도구(연결 후 렌탈 방식)
		- JdbcTemplate : 명령 실행 도구
		- SqlSessionFactoryBean : 스프링에서 마이바티스 중앙 제어장치(SqlSessionFactory)를 쓸 수 있게 하는 bean
		- SqlSessionTemplate : 스프링에서 구문 실행 장치(SqlSession)를 쓸 수 있게 하는 bean
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="kh"></property>
		<property name="password" value="kh"></property>
	</bean>

	<bean id="dbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="kh"></property>
		<property name="password" value="kh"></property>

		<property name="maxTotal" value="20"></property>
		<property name="maxIdle" value="5"></property>
		<property name="minIdle" value="0"></property>
		<property name="maxWaitMillis" value="3000"></property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- database 연결 도구를 주입(DI) 한다 -->
		<property name="dataSource" ref="dbcpSource"></property>
	</bean>
	
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 데이터베이스 연결 방식을 지정 -->
		<property name="dataSource" ref="dbcpSource"></property>
		<!-- 
			중앙 설정 파일 경로를 지정
			- classpath : src의 최상위부터 시작하는 경로
			- filepath : 프로젝트의 최상위부터 시작하는 경로 
		-->
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
		<!-- 
			매퍼 파일 경로를 지정(패턴)
			- 와일드카드를 2개 연속 사용하면 해당 경로 내부 어디든 관계없다는 의미
			- 와일드카드를 1개 사용하면 바로 하위 폴더 또는 텍스트를 의미 
		-->
		<property name="mapperLocations" value="classpath:/mybatis/mapper/**/*-mapper.xml"></property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 마이바티스 중앙 제어 장치의 정보를 "반드시" 가져야 하도록 설정(생성자) -->
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

</beans>